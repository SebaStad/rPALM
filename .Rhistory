})
dat %>% map(., function(x){
x %>%
mutate(currency = str_extract(.$financialVariable,"\n"))
})
dat %>% map(., function(x){
x %>%
mutate(currency = strsplit(.$financialVariable,"\n")[[1]][2])
})
dat %>% map(., function(x){
x %>%
mutate(currency = strsplit(.$financialVariable,"\\\n")[[1]][2])
})
dat %>% map(., function(x){
x %>%
mutate(currency = strsplit(.$financialVariable,"\\\n")[[1]][1])
})
dat %>% map(., function(x){
x %>%
mutate(currency = strsplit(.$financialVariable,"\\\n")[[2]][1])
})
dat %>% map(., function(x){
x %>%
mutate(currency = sub(".*/", "", .))
})
dat %>% map(., function(x){
x %>%
mutate(currency = sub(".*/", "", .$financialVariable))
})
dat <- list(company1 = structure(list(financialVariable = c("Ventas Cliente",
"Revenue\n\200", "Expenditure\n\200", "Profit (Loss)\n\200"),
`2019` = c("98716127", "987,161", "890,623", "96,538"), `2020` = c("1477902",
"1,477,902", "1,337,031", "140,871"), `2021` = c("1970536",
"1,970,536", "1,732,873", "237,663"), `2022` = c("2955805",
"2,955,805", "2,569,122", "386,683"), `2023` = c("4433708",
"4,433,708", "3,829,434", "604,274")), row.names = c(NA,
-4L), groups = structure(list(financialVariable = c("Expenditure\n\200",
"Profit (Loss)\n\200", "Revenue\n\200", "Ventas Cliente"), .rows = structure(list(
3L, 4L, 2L, 1L), ptype = integer(0), class = c("vctrs_list_of",
"vctrs_vctr", "list"))), row.names = c(NA, 4L), class = c("tbl_df",
"tbl", "data.frame"), .drop = TRUE), class = c("grouped_df",
"tbl_df", "tbl", "data.frame")), company11 = structure(list(financialVariable = c("B2C and B2B Sales",
"Revenue\nCHF", "Expenditure\nCHF", "Profit (Loss)\nCHF"), `2019` = c("2",
"69,000", "187,000", "-118,000"), `2020` = c("2", "170,000",
"556,000", "-386,000"), `2021` = c("2", "506,000", "1,102,000",
"-596,000"), `2022` = c("2", "1,269,000", "2,013,000", "-744,000"
), `2023` = c("2", "3,110,000", "3,761,000", "-651,000")), row.names = c(NA,
-4L), groups = structure(list(financialVariable = c("B2C and B2B Sales",
"Expenditure\nCHF", "Profit (Loss)\nCHF", "Revenue\nCHF"), .rows = structure(list(
1L, 3L, 4L, 2L), ptype = integer(0), class = c("vctrs_list_of",
"vctrs_vctr", "list"))), row.names = c(NA, 4L), class = c("tbl_df",
"tbl", "data.frame"), .drop = TRUE), class = c("grouped_df",
"tbl_df", "tbl", "data.frame")), company7 = structure(list(financialVariable = c("0",
"Revenue\n£", "Expenditure\n£", "Profit (Loss)\n£"), `2019` = c("0",
"0", "0", "0"), `2020` = c("0", "0", "0", "0")), row.names = c(NA,
-4L), groups = structure(list(financialVariable = c("0", "Expenditure\n£",
"Profit (Loss)\n£", "Revenue\n£"), .rows = structure(list(1L,
3L, 4L, 2L), ptype = integer(0), class = c("vctrs_list_of",
"vctrs_vctr", "list"))), row.names = c(NA, 4L), class = c("tbl_df",
"tbl", "data.frame"), .drop = TRUE), class = c("grouped_df",
"tbl_df", "tbl", "data.frame")))
dat %>% map(., function(x){
x %>%
mutate(currency = sub(".*\\", "", .$financialVariable))
})
dat %>% map(., function(x){
x %>%
mutate(currency = sub(".*\\\n", "", .$financialVariable))
})
dat %>% map(., function(x){
x %>%
mutate(currency = sub(".*\\n", "", .$financialVariable))
})
dat %>% map(., function(x){
x %>%
mutate(currency = strsplit(.$financialVariable,"\\\n")[[2]][2])
})
dat %>% map(., function(x){
x %>%
mutate(currency = str_extract(.$financialVariable,"\\\n"))
})
x %>%
mutate(currency = str_split(.$financialVariable,"\\\n"))
dat %>% map(., function(x){
x %>%
mutate(currency = str_split(.$financialVariable,"\\\n"))
})
dat %>% map(., function(x){
x %>%
mutate(currency = str_split(.$financialVariable,"\\\n")[[1]])
})
dat %>% map(., function(x){
x %>%
mutate(currency = str_split(.$financialVariable,"\\\n")[[2]][2])
})
styler:::style_selection()
dat %>%
mutate(currency = map(., function(x){
str_split(.$financialVariable, "\\\n")[[2]][2])
})
dat %>%
mutate(currency = map(., function(x){
mutate(currency = str_split(.$financialVariable, "\\\n")[[2]][2])
}))
dat %>%
mutate(currency = map(., function(x){
str_split(.$financialVariable, "\\\n")[[2]][2]
}))
dat %>% map(., function(x) {
x %>%
mutate(currency = str_split(.$financialVariable, "\\\n")[[2]][2])
})
dat$company1 %>% print(.$financialVariable)
dat$company1
dat$company1[,1]
dat$company1[,1][1]
dat$company1[,1][1,1]
dat %>% map(., function(x) {
x %>%
mutate(currency = str_split(.$financialVariable, "\\\n")[[2]][2])
})
dat %>%  map(.,  ~separate(.x, financialVariable, into = c("financialVariable", "Currency"), "\n"))
library(tidyverse)
occ_simulation <- function(nyears, lambda, alpha, beta){
data_matrix <- matrix(, nrow = nyears, ncol = 6)
for (z in 1:nyears){
data_matrix[z][1] <- z
}
for (yr in 1:nyears){
poisson_sim = rpois(1, lambda)
for (number_of_events in poisson_sim){
if (number_of_events == 1){
beta_sim = rbeta(1, alpha, beta)
data_matrix[yr, 2] <- beta_sim
} else if (number_of_events == 2){
for (i in 2:3){
beta_sim = rbeta(1, alpha, beta)
data_matrix[yr, i] <- beta_sim
}
} else if (number_of_events == 3){
for (i in 2:4){
beta_sim = rbeta(1, alpha, beta)
data_matrix[yr, i] <- beta_sim
}
} else if (number_of_events == 4){
for (i in 2:5){
beta_sim = rbeta(1, alpha, beta)
data_matrix[yr, i] <- beta_sim
}
} else{
for (i in 2:6){
beta_sim = rbeta(1, alpha, beta)
data_matrix[yr, i] <- beta_sim
}
}
}
}
sorted_matrix <- cbind(data_matrix[,1],t(apply(data_matrix[,2:6],1,function(x) sort(x))))
G <- sorted_matrix %>% as.data.frame %>%
pivot_longer(-V1) %>%
ggplot(aes(x=factor(V1),y=value,color=name,group=name))+
geom_point()+
labs(color='Column',x='Time (Years)', y ='Probability')+
theme_bw()
return(G)
}
manual = occ_simulation(10, 10, 2, 20)
manual
data_matrix <- matrix(, nrow = nyears, ncol = 6)
manual
dat <- matrix(round(runif(100)),10,10)
dat
dat <- matrix(round(runif(100)),10,10) %>%
as_tibble()
dat <- matrix(round(runif(100)),10,10) %>%
as_tibble(,.name_repair = "unique")
dat
dat %>%
mutate(rowsum = rowwise(sum))
dat %>%
mutate(rowsum = sum(contains("[a-z]")))
dat %>%
mutate(rowsum = sum(contains("[0-9")))
dat %>%
mutate(rowsum = sum(contains("[0-9]")))
dat %>%
rowwise() %>%
mutate(rsum = sum)
dat %>%
rowwise() %>%
mutate(rsum = sum(.))
dat %>%
rowwise() %>%
mutate(rsum = sum(names(.)))
dat %>%
rowwise() %>%
names(.)
dat %>%
rowwise() %>%
mutate(rsum = sum(!!!names(.)))
dat %>%
rowwise() %>%
mutate(rsum = sum(!!names(.)))
dat %>%
rowwise() %>%
mutate(rsum = sum(!!enquo(names(.))))
dat <- matrix(round(runif(100)),10,10) %>%
as_tibble(,.name_repair = "unique")
dat
dat %>%
rowwise() %>%
mutate(rsum = sum(enquo(names(.))))
dat %>%
rowwise() %>%
mutate(rsum = sum(enquo(!!names(.))))
dat %>%
rowwise() %>%
mutate(rsum = sum(!!enquo(names(.))))
dat %>%
rowwise() %>%
mutate(rsum = rowSums(.))
dat %>%
rowwise() %>%
mutate(rsum = rowSums(.[1:10]))
dat %>%
# rowwise() %>%
mutate(rsum = rowSums(.[1:10]))
dat %>%
mutate(rsum = rowSums(.))
dat %>%
mutate(rsum = rowSums(.)) %>%
filter(rsum >=2)
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_one = sum(rsum<2)/n())
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_two = sum(rsum<2)/n(),
more_than_two = sum(rsum>=2)/n())
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_two = sum(rsum<4)/n(),
more_than_two = sum(rsum>=4)/n())
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_two = 100*sum(rsum<5)/n(),
more_than_two = 100*sum(rsum>=5)/n())
dat <- matrix(ifelse(runif(100)>=0.1, 1,0),10,10) %>%
as_tibble(,.name_repair = "unique")
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_two = 100*sum(rsum<5)/n(),
more_than_two = 100*sum(rsum>=5)/n())
dat
dat <- matrix(ifelse(runif(100)>=0.1,0,1),10,10) %>%
as_tibble(,.name_repair = "unique")
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_two = 100*sum(rsum<5)/n(),
more_than_two = 100*sum(rsum>=5)/n())
dat
dat <- matrix(ifelse(runif(100)>=0.1,0,1),10,10) %>%
as_tibble(,.name_repair = "unique")
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_two = 100*sum(rsum<2)/n(),
more_than_two = 100*sum(rsum>=2)/n())
dat
dat <- matrix(ifelse(runif(100)>=0.1,0,1),10,10) %>%
as_tibble(,.name_repair = "unique")
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_two = 100*sum(rsum<2)/n(),
more_than_two = 100*sum(rsum>=2)/n())
set.seed(1234)
dat <- matrix(ifelse(runif(100)>=0.1,0,1),10,10) %>%
as_tibble(,.name_repair = "unique")
dat %>%
mutate(rsum = rowSums(.)) %>%
summarise(fewer_than_two = 100*sum(rsum<2)/n(),
more_than_two = 100*sum(rsum>=2)/n())
dat
library(rPALM)
library(rPALM)
library(rPALM)
library(rPALM)
library(rPALM)
install.packages("installr")
320*340*17
320*340*18
library(rPALM)
wind_vector <- seq(0,10, length.out = 100)
library(rPALM)
nx <- 50
ny <- 50
nz <- 100
dx <- 5
west_east_50 <- palm_dynamic$new(dx = dx, nx = nx, ny = ny, nz = nz)
wind_vector <- seq(0,10, length.out = 100)
topografy <- array(runif(nx*ny, min = 0, max = 25), dim = c(nx, ny))
west_east_50 <- palm_dynamic$new(dx = dx, nx = nx, ny = ny, nz = nz)
# Auswirkungen
west_east_50$set_initial_profile_lod1(variable = "pt",data.vector = 300)
west_east_50$set_initial_profile_lod1(variable = "qv",data.vector = 0.001)
west_east_50$create_soil(data.vector = rep(300,8),variable = "pt")
west_east_50$create_soil(data.vector = rep(0.01,8), variable = "qv")
# Kein Verticalwind an den Rändern
west_east_50$set_initial_profile_lod1(variable = "w", data.vector = 0)
# Simulationsdauer, in diesem Fall 3h, muss gegebenenfalls angepast werden.
west_east_50$set_time(duration = 8, steps = 28000)
# Unterscheidung nach Windrichtungen
west_east_50$set_initial_profile_lod1(variable = "u", data.vector = 0)
west_east_50$set_initial_profile_lod1(variable = "v", data.vector = -wind_vector)
west_east_50$set_vertical_profile("v", -wind_vector, "z")
names(west_east_50$data)
west_east_50$set_vertical_profile("u", data = 0, "z")
names(west_east_50$data)
self <- west_east_50
paste("forcing_", i), sep = "")%in%names(self$data)
paste("forcing_", i, sep = "")%in%names(self$data)
i <-  "left"
for( i in boundaries){
paste("forcing_", i, sep = "")%in%names(self$data)
}
paste("forcing_", i, sep = "")%in%names(self$data)
grep( paste("forcing_", i, sep = ""),names(self$data))
west_east_50 <- palm_dynamic$new(dx = dx, nx = nx, ny = ny, nz = nz)
wind_vector <- seq(0,10, length.out = 100)
topografy <- array(runif(nx*ny, min = 0, max = 25), dim = c(nx, ny))
# Einige Standartwerte
# durch die neutrale Rechnung, sind diese zwar vorhanden, haben aber keine
# Auswirkungen
west_east_50$set_initial_profile_lod1(variable = "pt",data.vector = 300)
west_east_50$set_initial_profile_lod1(variable = "qv",data.vector = 0.001)
west_east_50$create_soil(data.vector = rep(300,8),variable = "pt")
west_east_50$create_soil(data.vector = rep(0.01,8), variable = "qv")
# Kein Verticalwind an den Rändern
west_east_50$set_initial_profile_lod1(variable = "w", data.vector = 0)
# Simulationsdauer, in diesem Fall 3h, muss gegebenenfalls angepast werden.
west_east_50$set_time(duration = 8, steps = 28000)
# Unterscheidung nach Windrichtungen
west_east_50$set_initial_profile_lod1(variable = "u", data.vector = 0)
west_east_50$set_initial_profile_lod1(variable = "v", data.vector = -wind_vector)
west_east_50$prepopoulate_boundaries()
west_east_50$set_vertical_profile("v", -wind_vector, "z")
names(west_east_50$data)
self <- west_east_50
grep( paste("forcing_", i, sep = ""),names(self$data))
intersect(c(1,2,3), c(2,4))
intersect(
grep( paste("forcing_", i, sep = ""),names(self$data)),
c(grep("_u", names(self$data)) ), grep("_v", names(self$data)) ), grep("_w", names(self$data)) )
)
intersect(
grep( paste("forcing_", i, sep = ""),names(self$data)),
c(grep("_u", names(self$data)) , grep("_v", names(self$data)) , grep("_w", names(self$data)))
)
dim(topografy)
nrow(topografy)
ncol(topografy)
i
paste("forcing_", i, sep = "")%in%names(self$data)
name_pos <- intersect(
grep( paste("forcing_", i, sep = ""), names(self$data)),
c(grep("_u", names(self$data)) , grep("_v", names(self$data)) , grep("_w", names(self$data)))
)
boundary_names <- names(self$data)[name_pos]
boundary_names
array_pos[i]
array_pos <- list(
left = 1,
right = ncol(topografy),
north = nrow(topografy),
south = 1
)
array_pos <- list(
left = 1,
right = ncol(topografy),
north = nrow(topografy),
south = 1
)
array_pos[i]
topografy[1:2,1:2]
topografy[1,1:2]
topografy[1:2,1]
array_pos <- list(
left = c(1:nrow(topografy),1),
right = c(1:nrow(topografy),ncol(topografy)),
north = c(nrow(topografy), 1:ncol(topografy)),
south = c(1, 1:ncol(topografy))
)
array_pos
array_pos <- list(
left_l = 1:nrow(topografy),
right_l = 1:nrow(topografy),
north_l = nrow(topografy),
south_l = 1, ,
left_r = 1,
right_r = ncol(topografy),
north_r =  1:ncol(topografy),
south_r = 1:ncol(topografy)
)
array_pos <- list(
left_l = 1:nrow(topografy),
right_l = 1:nrow(topografy),
north_l = nrow(topografy),
south_l = 1,
left_r = 1,
right_r = ncol(topografy),
north_r =  1:ncol(topografy),
south_r = 1:ncol(topografy)
)
paste0(1,2)
topografy[array_pos[paste0(i, "_l")], array_pos[paste0(i, "_r")]]
i
topografy[array_pos[[paste0(i, "_l")]], array_pos[[paste0(i, "_r")]]]
topografy[1:2,1:2]
self$dims$x$vals[1:2]
resolution <- self$dims$x$vals[2] - self$dims$x$vals[1]
topo_sclice <- resolution*round(topo_sclice*resolution())
topo_sclice <- topografy[array_pos[[paste0(i, "_l")]], array_pos[[paste0(i, "_r")]]]
resolution <- self$dims$x$vals[2] - self$dims$x$vals[1]
topo_sclice <- resolution*round(topo_sclice*resolution())
topo_sclice <- resolution*round(topo_sclice*resolution)
topo_sclice
topo_sclice <- topografy[array_pos[[paste0(i, "_l")]], array_pos[[paste0(i, "_r")]]]
resolution <- self$dims$x$vals[2] - self$dims$x$vals[1]
topo_sclice <- resolution*round(topo_sclice/resolution)
topo_sclice
topo_sclice <- round(topo_sclice/resolution)
topo_sclice
starting_points <- round(topo_sclice/resolution) + 1
topo_sclice <- topografy[array_pos[[paste0(i, "_l")]], array_pos[[paste0(i, "_r")]]]
resolution <- self$dims$x$vals[2] - self$dims$x$vals[1]
starting_points <- round(topo_sclice/resolution) + 1
starting_points
boundary_names
self$data[[boundary_names]]
self$data[boundary_names]
test_list <-self$data[boundary_names][[1]]
length(test_list)
dim(test_list$vals)
j <- boundary_names[1]
self$data[[j]]$vals
dim(self$data[[j]]$vals)
j <- boundary_names[2]
dim(self$data[[j]]$vals)
self$vardimensions$ls_forcing_north_w
j
grep("z", dim_positions)
dim_positions <- self$vardimensions[[j]]
grep("z", dim_positions)
k <- 1
tmp_array[k,starting_points[k]:dim(tmp_array)[2],]
tmp_array <- self$data[[j]]$vals
dim_positions <- self$vardimensions[[j]]
tmp_array[k,starting_points[k]:dim(tmp_array)[2],]
length(starting_points[k]:dim(tmp_array)[2])
length(tmp_array[k,1:(dim(tmp_array)[2]-starting_points[k]),1])
tmp_array[k,starting_points[k]:dim(tmp_array)[2],] <- tmp_array[k,1:(dim(tmp_array)[2]-starting_points[k]+1),]
tmp_array[k,starting_points[k]:dim(tmp_array)[2],]
boundaries <- c("left", "right", "north", "south")
array_pos <- list(
left_l = 1:nrow(topografy),
right_l = 1:nrow(topografy),
north_l = nrow(topografy),
south_l = 1,
left_r = 1,
right_r = ncol(topografy),
north_r =  1:ncol(topografy),
south_r = 1:ncol(topografy)
)
for( i in boundaries){
name_pos <- intersect(
grep( paste("forcing_", i, sep = ""), names(self$data)),
c(grep("_u", names(self$data)) , grep("_v", names(self$data)) , grep("_w", names(self$data)))
)
boundary_names <- names(self$data)[name_pos]
topo_sclice <- topografy[array_pos[[paste0(i, "_l")]], array_pos[[paste0(i, "_r")]]]
resolution <- self$dims$x$vals[2] - self$dims$x$vals[1]
starting_points <- round(topo_sclice/resolution) + 1
for( j in boundary_names){
tmp_array <- self$data[[j]]$vals
dim_positions <- self$vardimensions[[j]]
where_z <- grep("z", dim_positions)
if(where_z==2){
for(k in seq(dim(tmp_array)[1])){
tmp_array[k,starting_points[k]:dim(tmp_array)[2],] <- tmp_array[k,1:(dim(tmp_array)[2]-starting_points[k]+1),]
}
} else if(where_z==1){
for(k in seq(dim(tmp_array)[2])){
tmp_array[starting_points[k]:dim(tmp_array)[1],k,] <- tmp_array[1:(dim(tmp_array)[1]-starting_points[k]+1),k,]
}
}
self$data[[j]]$vals <- tmp_array
}
}
self$data[[j]]$vals
self$data$ls_forcing_north_v$vals
self$data$ls_forcing_north_v$vals[1,1,1]
self$data$ls_forcing_north_v$vals[1:10,1,1]
self$data$ls_forcing_north_v$vals[1:20,1,1]
self$data$ls_forcing_north_v$vals[1,1:10,1]
self$vardimensions$ls_forcing_north_v
self$data$ls_forcing_north_v$vals[2,1:10,1]
topografy[nrow(topografy), 1:2]
library(rPALM)
library(rPALM)
devtools::document()
devtools::document()
library(rPALM)
library(rPALM)
