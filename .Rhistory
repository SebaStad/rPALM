self$data[["lad"]] <- adata
self$vardimensions[["lad"]]  <- c("x", "y", "zlad")
} else {
z <- tryCatch({seq(0, max(pch_index,na.rm=TRUE),by=1) * dz},
warning = function(w){
print("Warning in seq line 1557")
}, error = function(e){
print("Error in seq line 1557")
} )
z <- z - (dz/2)
z[1] <- 0
pre_lad <- rep(NA,length(z))
lad_array <- array(NA, c(dim(canopy_height)[1],dim(canopy_height)[2],length(z)))
for (i in 1:nx){
for(j in 1:ny){
# DEBUG ###########
# i <-2
# j <- 3
###################
#cat("i =",i,"j =",j, "\n")
int_bpdf <- 0
ch <- canopy_height[i,j]
if(!is.na(pch_index[i,j]) & ch >= dz){ # if(!is.na(ch) & ch >= 0.5*dz) <- dies war die originale Abfrage, funktioniert jedoch nicht bei canopy_height < dz !!!
for(k in 1:(pch_index[i,j]+1)){
int_bpdf <- int_bpdf + ((( z[k] / canopy_height[i,j])^( alpha - 1 )) * (( 1.0 - ( z[k] / canopy_height[i,j] ) )^(beta - 1 ) ) * ( dz / canopy_height[i,j] ) )
#cat("int_bpdf =",int_bpdf,"\n")
}
for(k in 1:(pch_index[i,j]+1)){
pre_lad[k] <- lai[i,j] * ( ( ( dz*(k-1) / canopy_height[i,j] )^( alpha - 1 ) ) * ( ( 1.0 - ( dz*(k-1) / canopy_height[i,j] ) )^(beta - 1 ) ) / int_bpdf ) / canopy_height[i,j]
#cat("pre_lad[",k,"] =",pre_lad[k],"\n")
}
lad_array[i,j,1] <- pre_lad[1]
for(k in 2:(pch_index[i,j]+1)){
lad_array[i,j,k] <- 0.5 * ( pre_lad[k-1] + pre_lad[k] )
#cat("lad_array[",i,",",j,", ] =",lad_array[i,j,],"\n")
}
}
}
}
lad_array[is.na(lad_array)] <- -9999.9
if(!is.null(additional_array) && any(names(self$data)=="lad")){
if(dim(lad_array)[3]>dim(self$data$lad$vals)[3]){
new_array <- array(-9999.9, c(dim(self$data$lad$vals)[1:2], dim(lad_array)[3]))
new_array[,,1:dim(self$data$lad$vals)[3]][self$data$lad$vals>=0] <- self$data$lad$vals[self$data$lad$vals>=0]
new_array[lad_array>0] <- lad_array[lad_array>0]
adata        <- list("long_name" = "zlad",
"standard_name" = "zlad",
"units" = "m",
"vals" = z)
self$dims[["zlad"]] <- adata
} else{
new_array <- array(-9999.9, c(dim(self$data$lad$vals)[1:2], dim(lad_array)[3]))
new_array[,,1:dim(self$data$lad$vals)[3]][self$data$lad$vals>=0] <- self$data$lad$vals[self$data$lad$vals>=0]
new_array[lad_array>0] <- lad_array[lad_array>0]
}
self$data$lad$vals<- new_array
} else if(any(is.null(startx),is.null(starty),is.null(lengthy),is.null(lengthx))){
adata        <- list("long_name" = "zlad",
"standard_name" = "zlad",
"units" = "m",
"vals" = z)
self$dims[["zlad"]] <- adata
adata      <- list("_FillValue" = -9999.9,
"units" = "m2/m3",
"long_name" = "leaf area density",
"source" = "Script by Dirk Pavlik after ncl script by Bjoern Maronga",
"vals" = lad_array,
"type" = "float")
self$data[["lad"]] <- adata
self$vardimensions[["lad"]]  <- c("x", "y", "zlad")
} else if(!any(names(self$data)=="lad")){
adata        <- list("long_name" = "zlad",
"standard_name" = "zlad",
"units" = "m",
"vals" = z)
self$dims[["zlad"]] <- adata
adata      <- list("_FillValue" = -9999.9,
"units" = "",
"long_name" = "lad",
"source" = "Script by Dirk Pavlik after ncl script by Bjoern Maronga",
"vals" = lad_array,
"type" = "float")
self$data[["lad"]] <- adata
self$vardimensions[["lad"]]  <- c("x", "y", "zlad")
} else {
if(dim(lad_array)[3]>dim(self$data$lad$vals)[3]){
new_array <- array(-9999.9, c(dim(self$data$lad$vals)[1:2], dim(lad_array)[3]))
new_array[,,1:dim(self$data$lad$vals)[3]][self$data$lad$vals>0] <- self$data$lad$vals[self$data$lad$vals>0]
new_array[startx:(startx+lengthx-1),starty:(starty+lengthy-1),][lad_array>0] <- lad_array[lad_array>0]
self$data$lad$vals<- new_array
adata        <- list("long_name" = "zlad",
"standard_name" = "zlad",
"units" = "m",
"vals" = z)
self$dims[["zlad"]] <- adata
} else{
self$data$lad$vals[startx:(startx+lengthx-1),starty:(starty+lengthy-1),][lad_array>0] <- lad_array[lad_array>0]
}
}
}
},
import_data = function(v.file , palmtype, typeid, street= FALSE){
# if(palmtype!=listofvariablesforpalm
if(self$oldversion){
checkvar <- "buildings_2D"
} else {
checkvar <- "buildings_2d"
}
if(palmtype==checkvar){
dtype  <- "float"
fillvalue <- -9999.9
} else {
dtype  <- "byte"
fillvalue <- -127
}
ncfile <- nc_open(v.file)
dimen <- list()
for(zz in seq(ncfile$ndims)){
vec         <- ncvar_get(ncfile, names(ncfile$dim)[zz])
attr        <- ncatt_get(ncfile, names(ncfile$dim)[zz])
adata <- list()
for(ii in seq(attr)){
adata[[names(attr)[ii]]]   <-attr[[ii]]
}
adata[["vals"]]= vec
dimen[[names(ncfile$dim)[zz]]]     <- adata
}
if(any(names(dimen)=="lon")){
names(dimen)[names(dimen)=="lon"] <- "x"
names(dimen)[names(dimen)=="lat"] <- "y"
}
if(!all(names(dimen) %in% names(self$dims))){
newdimensions <- which(!(names(dimen) %in% names(self$dims)))
self$dims[[names(dimen)[newdimensions]]] <- dimen[[newdimensions]]
}
dat <- list()
whichdimensions <- list()
vec         <- arcgischeck(
ncvar_get(ncfile, "Band1"),
self$arcgis)
vec[is.na(vec)]  <- fillvalue
attr        <- ncatt_get(ncfile, "Band1")
if(max(vec, na.rm = T)==1){
vec[vec>0]  <- typeid
}
# } else if(any(vec<0)) {
#   vec[vec<0]   <- typeid
# }
if(is.null(attr$units)){
attr$units <- ""
}
if(any(names(self$data)==palmtype)){
vec2 <- self$data[[palmtype]]$vals
vec2[vec!=0] <- vec[vec!=0]
vec <- vec2
}
if(street==TRUE & any(names(self$data)==checkvar) ){
###########
# THRESHOLD FOR BUILDINGS
th <- 4    # 4x5 = 20m Abstand von Straßenachse zu gebäude
newvec   <- array(0,dim=dim(vec))
#loop through all dimensions
for(i in seq(dim(vec)[1])){
for(j in seq(dim(vec)[2])){
#if pixel is not zero
if(vec[i,j]!=0){
newvec[i,j] <- typeid
}
if(vec[i,j]!=0 & (i>th & j>th) &  (i<(dim(vec)[1]-th) & (j<dim(vec)[2]-th)) ){
# and pixel in buildings_2D array within threshhold are not zero
if(any(self$data[[checkvar]]$vals[(i-th):i,(j-th):j])!=0){
newvec[(i-th):i,(j-th):j] <- typeid
}
if(any(self$data[[checkvar]]$vals[(i-th):i,j:(j+th)])!=0){
newvec[(i-th):i,j:(j+th)] <- typeid
}
if(any(self$data[[checkvar]]$vals[i:(i+th),(j-th):j])!=0){
newvec[i:(i+th),(j-th):j] <- typeid
}
if(any(self$data[[checkvar]]$vals[i:(i+th),j:(j+th)])!=0){
newvec[i:(i+th),j:(j+th)] <- typeid
}
}
}
}
newvec[self$data[[checkvar]]$vals!=0] <- 0
vec <- newvec
}
vec[vec==0] <- fillvalue
adata        <- list("_FillValue" = fillvalue,
"units" = attr$units,
"long_name" = gsub("_", " ",palmtype),
"source" = "Munich QGIS DATA",
"vals" = vec,
"type" = dtype,
"res_orig" = attr$res_orig,
"lod" = 1)
#dat[[palmtype]]     <- adata
whichdimensions[[palmtype]]  <- ncfile$var$Band1$dimids + 1
whichdims <- which(names(self$dims) %in% names(dimen))
self$data[[palmtype]]  <- adata
self$vardimensions[[palmtype]]  <- whichdims
},
SortOverlayingdata = function(inorderof = "BPWV"){
if(self$oldversion){
checkvar <- "buildings_2D"
} else {
checkvar <- "buildings_2d"
}
multidimarray <- array(0,c(dim(self$data$pavement_type$vals),4))
multidimarray[,,1]  <- self$data[[checkvar]]$vals
multidimarray[,,2]  <- self$data$pavement_type$vals
multidimarray[,,3]  <- self$data$water_type$vals
multidimarray[,,4]  <- self$data$vegetation_type$vals
arrayorder          <- c("B","P","W","V")
throwout            <- c(1,2,3,4)
outerfillv          <- c(0,-127,-127,-127)
loopvar <- unlist(strsplit(inorderof,split=""))
# check if first entry of table is always "fill_value!"
for(i in seq(loopvar)){
whicharray  <- which(loopvar[i]==arrayorder)
fillv       <- as.numeric(names(table(multidimarray[,,whicharray])[1]))
wherestuff  <- which(multidimarray[,,whicharray]!=fillv,arr.ind = T)
throwout    <- throwout[-which(throwout==whicharray)]
for(j in throwout){
bridge_1             <- multidimarray[,,j]
bridge_1[wherestuff] <- outerfillv[j]
multidimarray[,,j]   <- bridge_1
}
}
self$data[[checkvar]]$vals    <- multidimarray[,,1]
# self$data$building_id$vals[self$data$building_2d<0] <- -127
self$data$pavement_type$vals   <- multidimarray[,,2]
self$data$water_type$vals      <- multidimarray[,,3]
self$data$vegetation_type$vals <- multidimarray[,,4]
},
countemptyfields = function(){
if(self$oldversion){
checkvar <- "buildings_2D"
} else {
checkvar <- "buildings_2d"
}
NAarray <- array(-20,dim(self$data[[checkvar]]$vals))
NAarray[self$data[[checkvar]]$vals>0] <- self$data[[checkvar]]$vals[self$data[[checkvar]]$vals>0]
NAarray[self$data$pavement_type$vals>0] <- self$data$pavement_type$vals[self$data$pavement_type$vals>0]
NAarray[self$data$water_type$vals>0] <- self$data$water_type$vals[self$data$water_type$vals>0]
NAarray[self$data$vegetation_type$vals>0] <- self$data$vegetation_type$vals[self$data$vegetation_type$vals>0]
print(table(NAarray)[1])
},
addsoilandsurfacefraction = function(){
soiltype   <- self$data$vegetation_type$vals
soiltype[which(self$data$pavement_type$vals>0, arr.ind = T)]   <- 1
soiltype[soiltype>0]  <- 1
adata      <- list("_FillValue" = -127,
"units" = "",
"long_name" = "soil type classification",
# "long_name" = "soil type",
"source" = "First Guess",
"vals" = soiltype,
"type" = "byte")
self$data$soil_type  <- adata
self$vardimensions$soil_type <-  c(1,2)
xvec         <- c(0,1,2)
adata        <- list("vals" = xvec)
#"type" = "float")
self$dims$nsurface_fraction      <- adata
surfacefraction   <- array(NA, c(dim(self$data$vegetation_type$vals),4))
temp_array        <- array(-9999.9, dim(self$data$vegetation_type$vals))
temp_array[which(self$data$vegetation_type$vals>0, arr.ind = T)]   <- 1
surfacefraction[,,1]  <- temp_array
#surfacefraction[,,4]  <- temp_array
temp_array        <- array(-9999.9, dim(self$data$vegetation_type$vals))
temp_array[which(self$data$pavement_type$vals>0, arr.ind = T)]   <- 1
#temp_array2       <- temp_array
#temp_array2[surfacefraction[,,4]==1] <- 1
#surfacefraction[,,4]  <- temp_array2
surfacefraction[,,2]  <- temp_array
temp_array        <- array(-9999.9, dim(self$data$vegetation_type$vals))
temp_array[which(self$data$water_type$vals>0, arr.ind = T)]   <- 1
# temp_array2       <- temp_array
# temp_array2[surfacefraction[,,4]==1] <- 1
# surfacefraction[,,4]  <- temp_array2
surfacefraction[,,3]  <- temp_array
surfacefraction[,,2][which(surfacefraction[,,1]==1)] <- 0
surfacefraction[,,3][which(surfacefraction[,,1]==1)] <- 0
surfacefraction[,,1][which(surfacefraction[,,2]==1)] <- 0
surfacefraction[,,3][which(surfacefraction[,,2]==1)] <- 0
surfacefraction[,,2][which(surfacefraction[,,3]==1)] <- 0
surfacefraction[,,1][which(surfacefraction[,,3]==1)] <- 0
surfacefraction[,,4]  <-  surfacefraction[,,1] + surfacefraction[,,2]+ surfacefraction[,,3]
surfacefraction[,,4][which(surfacefraction[,,4]<0)] <- -9999.9
adata      <- list("_FillValue" = -9999.9,
"units" = "",
# "long_name" = "surface fraction",
"long_name" = "surface tile fraction",
"vals" = surfacefraction[,,1:3],
"type" = "float")
self$data$surface_fraction  <- adata
self$vardimensions$surface_fraction  <- c(1,2,which(names(self$dims)=="nsurface_fraction"))
},
add_lod2_variable = function(name, v.data = NULL){
lod <- NULL
if(grepl("water", name)){
varname <- "water_pars"
dimname <- "nwater_pars"
vardim_dim <- seq(0, 6)
longname <- "water parameters"
dattype  <- "float"
} else if(grepl("vegetation", name)){
varname <- "vegetation_pars"
dimname <- "nvegetation_pars"
vardim_dim <- seq(0, 11)
longname <- "vegetation parameters"
dattype  <- "float"
} else if(grepl("pavement", name)){
varname <- "pavement_pars"
dimname <- "npavement_pars"
vardim_dim <- seq(0, 3)
longname <- "pavement parameters"
dattype  <- "float"
} else if(grepl("soil", name)){
varname <- "soil_pars"
dimname <- "nsoil_pars"
vardim_dim <- seq(0, 7)
longname <- "soil parameters"
dattype  <- "float"
lod <- 2
} else if(grepl("building", name)){
varname <- "building_pars"
dimname <- "nbuilding_pars"
vardim_dim <- seq(0, 46)
longname <- "building parameters"
dattype  <- "float"
}
dimdata        <- list("long_name" = dimname,
"standard_name" = dimname,
"units" = "1",
"vals" = vardim_dim)
self$dims[[dimname]] <- dimdata
self$vardimensions[[varname]] <- c("x", "y", dimname)
if(is.null(v.data)){
valvec <- array(-9999.9,c(
dim(self$data$zt$vals)[1],
dim(self$data$zt$vals)[2],
length(vardim_dim)
))
} else if(dim(v.data)[1] != dim(self$data$zt$vals)[1] |
dim(v.data)[2] != dim(self$data$zt$vals)[2] |
dim(v.data)[3] != length(vardim_dim)){
valvec <- array(-9999.9,c(
dim(self$data$zt$vals)[1],
dim(self$data$zt$vals)[2],
length(vardim_dim)
))
} else {
valvec <- v.data
}
if(is.null(lod)){
adata     <- list("_FillValue" = -9999.9,
"units" = "1",
"long_name" = longname,
# "long_name" = "building id",
"source" = "idk made it up",
"vals" = valvec,
"type" = dattype)
} else {
adata     <- list("_FillValue" = -9999.9,
"units" = "1",
"long_name" = longname,
# "long_name" = "building id",
"source" = "idk made it up",
"lod" = lod,
"vals" = valvec,
"type" = dattype)
}
self$data[[varname]]  <- adata
},
print = function(...){
catch <- character()
tryCatch(catch <- length(self$dims$x$vals),
error= function(e){
cat("PALM Class \n")
cat("No data has been input \n")
invisible(self)
})
if(is.numeric(catch)){
cat("PALM Class \n")
cat("Gridpoints in x:", length(self$dims$x$vals), "\n", sep="")
cat("Gridpoints in y:", length(self$dims$y$vals), "\n", sep="")
cat("Resolution:", self$header$head$resolution, "\n", sep="")
invisible(self)
}
},
downscale_resolution = function(factor){
dimx <- length(self$dims$x$vals)
dimy <- length(self$dims$y$vals)
test <- list()
newvec <- c()
for(i in names(self$data)){
test[[i]] <- length(dim(self$data[[i]]$vals))
if(test[[i]]==2){
newvec <- c(newvec,i)
}
}
nelist <- list()
for(j in newvec){
resized <- resize(as.cimg(self$data[[j]]$vals),
dimx*1/(factor),dimy*1/(factor))[,,1,1]
self$data[[j]]$vals <- resized
}
old.dx <- self$header$head$resolution
new.dx <- old.dx*factor
self$header$head$resolution <- new.dx
## Z KOORDINATE
self$data$buildings_2d$vals <- floor(self$data$buildings_2d$vals/factor)*factor
newz.a  <- (old.dx/2)*factor
newz.b  <- max(self$data$buildings_2d$vals) - (old.dx/2)*factor
newz    <- c(0, seq(newz.a,newz.b,by=new.dx))
self$dims$z$vals <- newz
newx <- seq(new.dx/2,
dim(self$data$buildings_2d$vals)[1]*new.dx-new.dx/2,
by= new.dx)
self$dims$x$vals <-newx
newy <- seq(new.dx/2,
dim(self$data$buildings_2d$vals)[2]*new.dx-new.dx/2,
by= new.dx)
self$dims$y$vals <- newy
}
),
private = list(
)
)
test <- palm_ncdf_berlin$new(filename = "test.nc", headclass = qq)
palm_global <- R6::R6Class("palm_global", public= list(
head = NULL,
#' Create global parameters for static driver
#'
#' Create an R6 class that contains all global attributes needed
#' in the static driver.
#'
#' @param title Title of the file
#' @param author Author, i.e. you
#' @param institute Your institute
#' @param location Site of the static driver
#' @param x0 x-coordinate of the lower left point in your coordinate system
#' @param y0 y-coordinate of the lower left point in your coordinate system
#' @param z0 lowest z-coordinate in your domain
#' @param t0 good question
#' @param lat Latitude of the lower left point of your domain
#' @param lon Longitude of the lower left point of your domain
#' @param dx Grid spacing
#'
#' @return Creates the PALM-Header Class
#' @export
#'
#' @examples
#' palm_global$new('Testglobal', 'Max Mustermann', 'Some Institute',
#' 'Somewehere', 1, 1, 0, 0, 33,33, 10)
initialize = function(title, author, institute, location, x0, y0, z0, t0, lat, lon, dx = 5){
ncdflist = list(
"Conventions" = "CF-1.7",
"data_content" = "",
"source" = "",
"Version" = "1.0",
"dependencies" = "",
"history" = as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "UTC"),
"keywords" = "",
"campaign" = "UseUClim",
"creation_time" = as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "UTC"),
"title" = title,
"acronym" = "",
"institution" = institute,
"author" = author,
"contact_person" = author,
"licence" = "Text",
"origin_time" = t0,
"location" = location,
"site" = "",
"origin_x" = x0,
"origin_y" = y0,
"origin_z" = z0,
"resolution" = dx,
"origin_lat" = lat,
"origin_lon" = lon,
"rotation_angle" = 0.0,
"references" = "Maronga et al. (2015, GMD) - full description of PALM 4.0",
"Comment" = "",
"palm_version" = 6.0
)
self$head <- ncdflist
},
changeVar = function(variable, input){
self$head[[variable]]  <- input
},
changeTimeVar = function(variable, input){
# not yet implemented
self$head   <- self$head
}
)
)
headrr <- palm_global$new(title = "ich",author = "ich",institute = )
headrr <- palm_global$new(title = "ich",author = "ich",institute = )
headrr <- palm_global$new(title = "ich",author = "ich",institute = "ich", location = "hier", x0 = 1,y0 = 1,z0 = 1,t0 = "test", lat = 30,lon = 20,dx = 10)
palm_ncdf_berlin$new("test.nc", headclass = headrr, pathtofiles = "asdf")
load_all()
document()
load_all()
headrr <- palm_global$new(title = "ich",author = "ich",institute = "ich", location = "hier", x0 = 1,y0 = 1,z0 = 1,t0 = "test", lat = 30,lon = 20,dx = 10)
palm_ncdf_berlin$new("test.nc", headclass = headrr, pathtofiles = "asdf")
load_all()
document()
source('C:/Users/sest/Desktop/rPALM/rPALM/R/palm_berlin.R', encoding = 'UTF-8', echo=TRUE)
