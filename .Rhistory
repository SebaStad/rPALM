cat("\t \"vals\" = data,\n")
cat("\t \"type\" = \"either byte or float (or int)\")\n")
cat("\n")
cat("Template for dimension_list:\n")
cat("list(\"long_name\" = \"a long name\",\n")
cat("\t \"standard_name\" = \"a long name\",\n")
cat("\t \"units\" = \"units of data\",\n")
cat("\t \"vals\" = data)\n")
} else {
}
test <- list("_FillValue" = either -127 oder -9999.9,
"units" = "units of data",
"long_name" = "a long name",
"source" = "source of data",
"lod" = "1 or 2 depending on data",
"vals" = data,
"type" = "either byte or float (or int)")
test <- list("_FillValue" = "either -127 oder -9999.9",
"units" = "units of data",
"long_name" = "a long name",
"source" = "source of data",
"lod" = "1 or 2 depending on data",
"vals" = data,
"type" = "either byte or float (or int)")
test$source
names(test)
names(test)%in%(c("_FillValue", "units"))
names(test)%in%(c("units"))
names(variable_list)%in%c("_FillValue", "units","long_name","source" ,"lod",
"vals", "type" )
names(test)%in%c("_FillValue", "units","long_name","source" ,"lod",
"vals", "type" )
variable_list <- test
if(!all(names(variable_list)%in%c("_FillValue", "units","long_name","source" ,"lod",
"vals", "type" ))){
cat("Not all necessary data in variable_list!\n")
stop()
}
library(rPALM)
library(rPALM)
document()
library(devtools)
document()
document()
render(input = "README.Rmd", output_format = "md_document")
library(devtools)
document()
render(input = "README.Rmd", output_format = "md_document")
library(rmarkdown)
document()
render(input = "README.Rmd", output_format = "md_document")
document()
render(input = "README.Rmd", output_format = "md_document")
# First, create the 3D Buidlings data. It does not do anything different from buildings_2d BUT:
#       1. enables 3D visualization in ParaView (so it is mandatory)
#       2. enables the creation of bridges and gates (has to be done manually, time expensive)
manual_class$createbuilding3D(TRUE, FALSE)
library(rPALM)
# First:
# Define a headclass
manual_headclass <- palm_global$new(title = "GIT Example",
author = "sest",
institute = "IBP",
location = "Hoki",
x0 = 0,   # only important for visualization on a map later on
y0 = 0,   # only important for visualization on a map later on
z0 = 0,
t0 = "2018-06-21 12:00:00 +00", # Character with Date in this format,
# might be important to have correct in later releases of PALM!
lat = 52.502302,   # important for solar radiation
lon = 13.364862,   # important for solar radiation
dx = 5)
manual_class <- palm_ncdf_manual$new(nx = 20, ny = 20, dx = 5,
headclass = manual_headclass)
# Manually set vegetation to short grass
manual_class$data$vegetation_type$vals <- array(3,dim = c(20,20))
# Set one Tree
manual_class$data$vegetation_type$vals[9:11,2:3] <- 6
# Pavement
manual_class$data$pavement_type$vals[,9:11] <- 2
# water
manual_class$data$water_type$vals[,13:14] <- 2
# buildings
manual_class$data$buildings_2d$vals[5:15, 6:8] <- 20
manual_class$data$building_id$vals[5:15, 6:8]  <- 1
manual_class$data$building_type$vals[5:15, 6:8] <- 3
#Sort Data
manual_class$SortOverlayingdata("BPWV")
# plot
manual_class$plot_area(1,1,20,20)
# First, create the 3D Buidlings data. It does not do anything different from buildings_2d BUT:
#       1. enables 3D visualization in ParaView (so it is mandatory)
#       2. enables the creation of bridges and gates (has to be done manually, time expensive)
manual_class$createbuilding3D(TRUE, FALSE)
document()
render(input = "README.Rmd", output_format = "md_document")
library(devtools)
devtools::document()
library(rPALM)
library(rPALM)
library(rPALM)
library(rPALM)
cat("Template for variable_list:\n")
cat("list(\"_FillValue\" = either -127 oder -9999.9,\n")
cat("\t \"units\" = \"units of data\",\n")
cat("\t \"long_name\" = \"a long name\",\n")
cat("\t \"source\" = \"source of data\",\n")
cat("\t \"lod\" = \"1 or 2 depending on data\",\n")
cat("\t \"vals\" = data,\n")
cat("\t \"type\" = \"either byte or float (or int)\")\n")
cat("\n")
{
cat("Template for variable_list:\n")
cat("list(\"_FillValue\" = either -127 oder -9999.9,\n")
cat("\t \"units\" = \"units of data\",\n")
cat("\t \"long_name\" = \"a long name\",\n")
cat("\t \"source\" = \"source of data\",\n")
cat("\t \"lod\" = \"1 or 2 depending on data\",\n")
cat("\t \"vals\" = data,\n")
cat("\t \"type\" = \"either byte or float (or int)\")\n")
cat("\n")
}
palm_ncdf_data_template <- R6::R6Class(classname = "palm_ncdf_data_template",
public = list(
datalist = list(),
data_dims = list(),
#' Title
#'
#' @param dat_name  Variable Name for StaticDriver
#' @param FillValue Fill_Value of Data
#' @param d_units   Units of Data
#' @param longname  LongName
#' @param d_source  Source of Data
#' @param lod       Level of Detail
#' @param data      Data!
#' @param d_type    DataType
#' @param dimensions  Which Dimensions correspond to data?
#'
#' @return A R6 Class with the needed Setup for the palm_ncdf_berlin clones.
#' @export
#'
#' @examples
#' x <- 1
initialize = function(dat_name,
FillValue,
d_units,
longname,
d_source,
lod,
data,
d_type,
dimensions){
datalist[[dat_name]] <- list(
"_FillValue" =  FillValue,
"units" = d_units,
"long_name" = long_name,
"source" = d_source,
"lod" = lod,
"vals" = data,
"type" = dtype
)
data_dims[[dat_name]] <- dimension
},
print = function(){
cat(paste("Data_set for palm_ncdf"))
}
)
)
palm_ncdf_data_template$new
library(rPALM)
library(rPALM)
library(rPALM)
library(rPALM)
library(rPALM)
library(rPALM)
library(rPALM)
library(rPALM)
devtools::document()
library(rPALM)
library(rPALM)
devtools::package_info(rPALM)
devtools::package_info("rPALM")
styler:::style_active_file()
seq( as.POSIXct( "2018-01-01") , as.POSIXct("2018-12-31"), qr)
seq( as.POSIXct( "2018-01-01") , as.POSIXct("2018-12-31"),length.out = 26281)
library(rPALM)
source("C:/Users/sest/Desktop/r Packages/rPALM/R/palm_berlin.R")
setwd("D:\\19 Berlin 10m aktuell")
ncfile <- nc_open("Berlin_pavement_type_10m_DLR.nc")
which(ncfile$dim$x$vals> 387898)[1]
which(ncfile$dim$y$vals> 5816598)[1]
pavement <- ncvar_get(ncfile, "Band1", start =c(1857,1768), count = c(100,100))
nc_close(ncfile)
eisenach_header <- palm_global$new(title = "Kilian Projekt",
author = "Sest",
institute = "IBP",
location = "Hoki",
x0 = 1857,
y0 = 1768,
z0 = 0,
t0 = "2019-11-06 12:00:00 +01",
lat = 52.488,
lon = 13.349,
dx = 10)
berlin_eisenach <- palm_ncdf_berlin$new(filename = "berlin_kilian.nc",
headclass = eisenach_header,
pathtofiles = getwd(),
oldversion = F)
berlin_eisenach$importfiles(lengthx = 100,
lengthy = 100,
dx = 10, clear_overlap = TRUE)
# berlin_eisenach$quickplot("pavement_type")
berlin_eisenach$data$pavement_type$vals <- pavement
plot(berlin_eisenach)
library(rPALM)
setwd("D:\\19 Berlin 1m aktuell")
setwd("D:\\18 Berlin 1m aktuell/")
ncfile <- nc_open("Berlin_pavement_type_1m_DLR.nc")
which(ncfile$dim$x$vals> 387898)[1]
which(ncfile$dim$y$vals> 5816598)[1]
x0 <-  which(ncfile$dim$x$vals> 387898)[1]
y0 <-  which(ncfile$dim$y$vals> 5816598)[1]
pavement <- ncvar_get(ncfile, "Band1", start =c(x0,y0), count = c(1000,1000))
nc_close(ncfile)
eisenach_header <- palm_global$new(title = "Kilian Projekt",
author = "Sest",
institute = "IBP",
location = "Hoki",
x0 = x0,
y0 = y0,
z0 = 0,
t0 = "2019-11-06 12:00:00 +01",
lat = 52.488,
lon = 13.349,
dx = 10)
berlin_eisenach <- palm_ncdf_berlin$new(filename = "berlin_kilian.nc",
headclass = eisenach_header,
pathtofiles = getwd(),
oldversion = F)
berlin_eisenach$importfiles(lengthx = 1000,
lengthy = 1000,
dx = 1, clear_overlap = TRUE)
plot_2d <- rPALM:::plot_2d_data()
plot_2d <- rPALM:::plot_2d_data
plot(berlin_eisenach)
berlin_eisenach$SortOverlayingdata("BPVW")
plot(berlin_eisenach)
plot_2d(berlin_eisenach$data$vegetation_type$vals)
plot_2d(berlin_eisenach$data$pavement_type$vals)
plot_2d(berlin_eisenach$data$buildings_2d$vals)
plot_2d(berlin_eisenach$data$water_type$vals)
berlin_eisenach <- palm_ncdf_berlin$new(filename = "berlin_kilian.nc",
headclass = eisenach_header,
pathtofiles = getwd(),
oldversion = F)
berlin_eisenach$importfiles(lengthx = 1000,
lengthy = 1000,
dx = 1, clear_overlap = TRUE)
plot_2d <- rPALM:::plot_2d_data
plot(berlin_eisenach)
library(rayshader)
library(rayrender)
berlin <- palm_ncdf_berlin$new(filename = "berlin_kilian.nc",
headclass = eisenach_header,
pathtofiles = getwd(),
oldversion = F)
berlin$importfiles(lengthx = 1000,
lengthy = 1000,
dx = 1, clear_overlap = TRUE)
berlin_gras <- berlin$data$zt$vals
berlin_gras[berlin$data$vegetation_type$vals!=3] <- 0
berlin_trees <- berlin$data$zt$vals
berlin_trees[berlin$data$lad$vals[,,1]<0] <- 0
tree_height <- array(0, dim(berlin$data$lad$vals)[1:2])
for(k in seq(19)){
tree_height[!(berlin$data$lad$vals[,,k]<0)] <- k
}
# get_tree_data -----------------------------------------------------------
ncfile <- nc_open("Berlin_trees_height_clean_1m_DLR.nc")
tree_height <- ncvar_get("Band1", start=c(x0,y0), count = c(1000,1000))
x0
tree_height <- ncvar_get(ncfile,"Band1", start=c(x0,y0), count = c(1000,1000))
ncfile <- nc_open("Berlin_trees_crown_1m_clean_DLR.nc")
tree_crown <- ncvar_get(ncfile,"Band1", start=c(x0,y0), count = c(1000,1000))
nc_close()
nc_close(ncfile)
plot_2d(tree_crown[400:500,400:500])
plot_2d(tree_crown)
dim(tree_crown)
plot_2d(tree_crown[400:600,400:600])
ncfile <- nc_open("Berlin_trees_crown_clean_1m_DLR.nc")
tree_crown <- ncvar_get(ncfile,"Band1", start=c(x0,y0), count = c(1000,1000))
nc_close(ncfile)
plot_2d(tree_crown[400:600,400:600])
plot_2d(tree_height[400:600,400:600])
ncfile <- nc_open("Berlin_trees_crown_1m_DLR.nc")
tree_crown <- ncvar_get(ncfile,"Band1", start=c(x0,y0), count = c(1000,1000))
nc_close(ncfile)
plot_2d(tree_height[400:600,400:600])
berlin$generate_lad_single_trees(ext_tree_type = 1, ext_tree_height = tree_height,
ext_crown_diameter = tree_crown)
th <- palm_ncdf_data_template$new(dat_name = "tree_height",FillValue = -9999.9,d_units = "m",
longname = "tree height", d_source = "dlr", lod = 1,
data = tree_height, dimensions = c("x", "y"))
th <- palm_ncdf_data_template$new(dat_name = "tree_height",FillValue = -9999.9,d_units = "m",
longname = "tree height", d_source = "dlr", lod = 1,
data = tree_height, dimensions = c("x", "y"), d_type = "float")
berlin$add_R6_data(th)
berlin$generate_lad_single_trees(ext_tree_type = 1, ext_tree_height = tree_height,
ext_crown_diameter = tree_crown)
table(tree_height)
tree_height[tree_height<0] <- 5
th <- palm_ncdf_data_template$new(dat_name = "tree_height",FillValue = -9999.9,d_units = "m",
longname = "tree height", d_source = "dlr", lod = 1,
data = tree_height, dimensions = c("x", "y"), d_type = "float")
berlin$add_R6_data(th)
berlin$generate_lad_single_trees(ext_tree_type = 1, ext_tree_height = tree_height,
ext_crown_diameter = tree_crown)
berlin$generate_lad_patch()
summary(berlin$data$buildings_2d$vals)
berlin_build <- berlin$data$zt$vals
berlin_build[berlin$data$buildings_2d$vals<=0] <- 0
berlin_build <- berlin_build + berlin$data$buildings_2d$vals
plot_2d_data(berlin_build)
berlin_pave <- berlin$data$zt$vals
berlin_pave[berlin$data$pavement_type$vals<=0] <- 0
berlin_water <- berlin$data$zt$vals
berlin_water[berlin$data$water_type$vals<=0] <- 0
plot_2d(berlin_water)
# Test --------------------------------------------------------------------
tree_col <- rgb(173/256, 209/256, 158/256)
gras_col <- rgb(200/257, 250/256, 204/256)
pave_col <- rgb(204/256, 204/256, 204/256)
wate_col <- rgb(170/256, 211/256, 223/256)
buil_col <- rgb(204/256, 0,0)
bl2 <- berlin_build
bl2[bl2<=0] <- 0
berlin$data$water_type$vals<=0
berlin_pave[is.na(berlin$data$pavement_type$vals)] <- 0
berlin_water[is.na(berlin$data$water_type$vals)] <- 0
plot_2d(berlin_water)
data_plot <- berlin_pave
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
data_plot <- berlin_gras
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
data_plot <- bl2
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
berlin_gras <- berlin$data$zt$vals
berlin_gras[is.na(berlin$data$vegetation_type$vals)] <- 0
data_plot <- berlin_gras
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
data_plot <- bl2
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
rayshader::save_obj(filename = "berlin_ralf.obj")
berlin$plot_area()
berlin$plotcntr
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(berlin$savedplots[[1]]) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
plot_gg(berlin$savedplots[[1]])
img <-imager::load.image("berlin_ralf_1.png")
img <- imager::resize(img, 1000,1000)
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(img) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
class(img)
as.array(img)
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img)) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,])) %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
data_plot %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,]), alphacolor = "white") %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
data_plot[,ncol(data_plot):1] %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,]), alphacolor = "white") %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
data_plot[,nrow(data_plot):1] %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,]), alphacolor = "white") %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
col(matri(c(2,2),2))
col(matrix(c(2,2),2))
row(matrix(c(2,2),2))
nrow(matrix(c(2,2),2))
ncol(matrix(c(2,2),2))
matrix(c(2,2),2)
nrow(data_plot):1
matrix(c(2,2),2)
matrix(c(2,2),2)[1,]
data_plot[nrow(data_plot):1,] %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,]), alphacolor = "white") %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
plot_2d(data_plot)
plot_2d(data_plot[nrow(data_plot):1,])
dat <- data_plot[ncol(data_plot):1,]
dat %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,]), alphacolor = "white") %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
img <- imager::rotate_xy(img, 180)
img <- imager::rotate_xy(img, 180, cx = 500, cy = 500)
dat %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,]), alphacolor = "white") %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
img <- imager::mirror(img, x)
img <-imager::load.image("berlin_ralf_1.png")
img <- imager::resize(img, 1000,1000)
img <- imager::mirror(img, axis = "x")
dat %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,]), alphacolor = "white") %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
img <-imager::load.image("berlin_ralf_1.png")
img <- imager::resize(img, 1000,1000)
img <- imager::mirror(img, axis = "y")
dat %>%
sphere_shade(texture = create_texture( pave_col, pave_col,  pave_col,  pave_col,  pave_col)) %>%
add_shadow(ray_shade(data_plot, zscale = 1, maxsearch = 300), 0.5) %>%
#  add_shadow(ambient_shade(data_plot), 0.5) %>%
add_overlay(as.array(img[,,1,]), alphacolor = "white") %>%
plot_3d(data_plot, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45,
windowsize = c(1000, 800), solid = F)
rayshader::save_obj(filename = "berlin_ralf_gg.obj")
rayshader::save_obj(filename = "berlin_ralf_gg.obj",save_texture = T)
library(rgl)
save_obj
berlin$generate_lad_single_trees(ext_tree_type = 1, ext_tree_height = tree_height,
ext_crown_diameter = tree_crown)
table(tree_crown)
ncfile <- nc_open("Berlin_trees_crown_1m_DLR.nc")
tree_crown <- ncvar_get(ncfile,"Band1", start=c(x0,y0), count = c(1000,1000))
nc_close(ncfile)
table(tree_crown)
tree_crown[!is.na(tree_crown)] <- 5
th <- palm_ncdf_data_template$new(dat_name = "tree_height",FillValue = -9999.9,d_units = "m",
longname = "tree height", d_source = "dlr", lod = 1,
data = tree_height, dimensions = c("x", "y"), d_type = "float")
berlin$add_R6_data(th)
berlin$generate_lad_single_trees(ext_tree_type = 1, ext_tree_height = tree_height,
ext_crown_diameter = tree_crown)
table(tree_height)
dim(self$data$lad$vals)[3] < dim(lad_temp)[3]
library(rPALM)
